
Exercise3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000354  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000686  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */

#include <avr/io.h>

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~(1<<PB0) & ~(1<<PB1);  // configure pin 0 and pin 1 in PORTB as input pins.
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8c 7f       	andi	r24, 0xFC	; 252
  80:	8c 93       	st	X, r24
	DDRC |= (1<<PC0) | (1<<PC1);    // configure pin 0 and pin 1 in PORTC as output pins.
  82:	a4 e3       	ldi	r26, 0x34	; 52
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8c 93       	st	X, r24
	
	// Set pin 0 and pin 1 in PORTC with value 0 at the beginning (LED1 and LED2 are OFF)
	PORTC &= ~(1<<PC0) & ~(1<<PC1);
  90:	a5 e3       	ldi	r26, 0x35	; 53
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e5 e3       	ldi	r30, 0x35	; 53
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8c 7f       	andi	r24, 0xFC	; 252
  9c:	8c 93       	st	X, r24
	
    while(1)
    {
    	if(PINB & (1<<PB0)) // Check if the first switch at PB0 is pressed or not
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	90 70       	andi	r25, 0x00	; 0
  ac:	88 23       	and	r24, r24
  ae:	41 f0       	breq	.+16     	; 0xc0 <main+0x54>
    	{
    		PORTC |= (1<<PC0); // Set pin 0 in PORTC with value 1 (LED1 ON)
  b0:	a5 e3       	ldi	r26, 0x35	; 53
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e5 e3       	ldi	r30, 0x35	; 53
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8c 93       	st	X, r24
  be:	07 c0       	rjmp	.+14     	; 0xce <main+0x62>
    	}
    	else
    	{
    		PORTC &= (~(1<<PC0)); // Set pin 0 in PORTC with value 0 (LED1 OFF)
  c0:	a5 e3       	ldi	r26, 0x35	; 53
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e5 e3       	ldi	r30, 0x35	; 53
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	8c 93       	st	X, r24
    	}
    	if(PINB & (1<<PB1)) // Check if the second switch at PB1 is pressed or not
  ce:	e6 e3       	ldi	r30, 0x36	; 54
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	82 70       	andi	r24, 0x02	; 2
  da:	90 70       	andi	r25, 0x00	; 0
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	41 f0       	breq	.+16     	; 0xf0 <main+0x84>
    	{
    		PORTC |= (1<<PC1); // Set pin 1 in PORTC with value 1 (LED2 ON)
  e0:	a5 e3       	ldi	r26, 0x35	; 53
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e3       	ldi	r30, 0x35	; 53
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	8c 93       	st	X, r24
  ee:	d7 cf       	rjmp	.-82     	; 0x9e <main+0x32>
    	}
    	else
    	{
    		PORTC &= (~(1<<PC1)); // Set pin 1 in PORTC with value 0 (LED2 OFF)
  f0:	a5 e3       	ldi	r26, 0x35	; 53
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e5 e3       	ldi	r30, 0x35	; 53
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	8c 93       	st	X, r24
  fe:	cf cf       	rjmp	.-98     	; 0x9e <main+0x32>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
